<!DOCTYPE html>
<html lang="{{ idioma_actual }}" data-bs-theme="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
    
    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Estilos personalizados mínimos -->
    <link rel="stylesheet" href="/assets/styles/generic.css">
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Estilos inline -->
    <style>
        .admin-sidebar {
            min-height: calc(100vh - 56px);
            background-color: rgba(33, 37, 41, 0.8);
            padding-top: 20px;
        }
        .admin-sidebar .nav-link {
            color: rgba(255, 255, 255, 0.75);
            border-radius: 0;
            transition: all 0.3s ease;
        }
        .admin-sidebar .nav-link:hover {
            color: rgba(255, 255, 255, 1);
            transform: translateX(5px);
        }
        .admin-sidebar .nav-link.active {
            color: white;
            background-color: rgba(255, 255, 255, 0.1);
            border-left: 4px solid #0d6efd;
        }
        .admin-main {
            padding: 20px;
        }
        .stats-card {
            background-color: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        .stats-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        }
        .card {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.1);
            background-color: rgba(255, 255, 255, 0.05);
        }
        .card:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);
        }
        .card-header {
            background-color: rgba(255, 255, 255, 0.1);
        }
        .table {
            border-color: rgba(255, 255, 255, 0.1);
        }
    </style>
</head>
<body>
    <header>
        {% include 'components/navbar.twig' %}
    </header>

    <div class="container-fluid">
        <div class="row">
            <!-- Contenido principal -->
            <main class="col-md-12 ms-sm-auto px-md-4">
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <h1 class="h2">{{ _('Panel de administración') }}</h1>
                </div>

                <!-- Pestañas de navegación -->
                <ul class="nav nav-tabs mb-4" id="adminTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="stats-tab" data-bs-toggle="tab" data-bs-target="#stats" type="button" role="tab" aria-controls="stats" aria-selected="true">
                            <i class="fas fa-chart-bar me-1"></i> {{ _('Estadísticas') }}
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="fungi-tab" data-bs-toggle="tab" data-bs-target="#fungi" type="button" role="tab" aria-controls="fungi" aria-selected="false">
                            <i class="fas fa-mushroom me-1"></i> {{ _('Hongos') }}
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="users-tab" data-bs-toggle="tab" data-bs-target="#users" type="button" role="tab" aria-controls="users" aria-selected="false">
                            <i class="fas fa-users me-1"></i> {{ _('Usuarios') }}
                        </button>
                    </li>
                </ul>

                <!-- Contenido de las pestañas -->
                <div class="tab-content" id="adminTabContent">
                    <!-- Pestaña de Estadísticas -->
                    <div class="tab-pane fade show active" id="stats" role="tabpanel" aria-labelledby="stats-tab">
                        <!-- Tarjetas de estadísticas -->
                        <div class="row mb-4">
                            {% set stat_cards = [
                                {title: 'Total de hongos', value: stats.total_fungi, color: 'primary'},
                                {title: 'Total de usuarios', value: stats.total_users, color: 'success'}
                            ] %}

                            {% for card in stat_cards %}
                                <div class="col-md-6">
                                    <div class="card mb-4">
                                        <div class="card-body text-center">
                                            <h5 class="card-title">{{ _(card.title) }}</h5>
                                            <h2 class="text-{{ card.color }}">{{ card.value }}</h2>
                                        </div>
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                    
                    <!-- Pestaña de Hongos -->
                    <div class="tab-pane fade" id="fungi" role="tabpanel" aria-labelledby="fungi-tab">
                        <div class="d-flex justify-content-between mb-3">
                            <h3>{{ _('Gestión de Hongos') }}</h3>
                            <button class="btn btn-primary" id="btnAddFungi">
                                <i class="fas fa-plus"></i> {{ _('Nuevo hongo') }}
                            </button>
                        </div>
                        
                        <!-- Control de elementos por página -->
                        <div class="d-flex justify-content-end mb-3">
                            <div class="form-inline">
                                <label for="fungiItemsPerPage" class="me-2">{{ _('Mostrar') }}:</label>
                                <select id="fungiItemsPerPage" class="form-select form-select-sm">
                                    <option value="10">10</option>
                                    <option value="20" selected>20</option>
                                    <option value="50">50</option>
                                    <option value="100">100</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="table-responsive">
                            <table class="table table-striped" id="fungiTable">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>{{ _('Nombre') }}</th>
                                        <th>{{ _('Comestibilidad') }}</th>
                                        <th>{{ _('Acciones') }}</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Se llenará dinámicamente con datos de /api/fungi/page/X/limit/Y -->
                                </tbody>
                            </table>
                        </div>
                        
                        <!-- Contenedor para la paginación -->
                        <div id="fungiPagination" class="mt-3"></div>
                    </div>

                    <!-- Pestaña de Usuarios -->
                    <div class="tab-pane fade" id="users" role="tabpanel" aria-labelledby="users-tab">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h3>{{ _('Gestión de Usuarios') }}</h3>
                        </div>
                        
                        <div class="card">
                            <div class="card-header bg-dark">
                                <h5 class="mb-0">{{ _('Lista de Usuarios') }}</h5>
                            </div>
                            <div class="card-body p-0">
                                <div class="table-responsive">
                                    <table class="table table-hover" id="users-table">
                                        <thead>
                                            <tr>
                                                <th>ID</th>
                                                <th>{{ _('Nombre de Usuario') }}</th>
                                                <th>{{ _('Correo Electrónico') }}</th>
                                                <th>{{ _('Rol') }}</th>
                                                <th>{{ _('Acciones') }}</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <!-- Se llenará dinámicamente con datos de /api/users -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Modal para Editar/Crear Hongo -->
                <div class="modal fade" id="fungusModal" tabindex="-1" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="fungusModalTitle">{{ _('Editar Hongo') }}</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <form id="fungusForm">
                                    <input type="hidden" id="fungi_id">
                                    <div class="mb-3">
                                        <label for="fungi_name" class="form-label">{{ _('Nombre') }}</label>
                                        <input type="text" class="form-control" id="fungi_name" required>
                                    </div>
                                    <div class="mb-3">
                                        <label for="fungi_common_name" class="form-label">{{ _('Nombre común') }}</label>
                                        <input type="text" class="form-control" id="fungi_common_name">
                                    </div>
                                    <div class="mb-3">
                                        <label for="fungi_edibility" class="form-label">{{ _('Comestibilidad') }}</label>
                                        <select class="form-control" id="fungi_edibility">
                                            <option value="buen-comestible">{{ _('Buen comestible') }}</option>
                                            <option value="comestible">{{ _('Comestible') }}</option>
                                            <option value="comestible-precaucion">{{ _('Comestible con precaución') }}</option>
                                            <option value="excelente-comestible">{{ _('Excelente comestible') }}</option>
                                            <option value="mortal">{{ _('Mortal') }}</option>
                                            <option value="no-comestible">{{ _('No comestible') }}</option>
                                            <option value="sin-valor">{{ _('Sin valor culinario') }}</option>
                                            <option value="toxica">{{ _('Tóxica') }}</option>
                                        </select>
                                    </div>
                                    <div class="mb-3">
                                        <label for="fungi_habitat" class="form-label">{{ _('Hábitat') }}</label>
                                        <input type="text" class="form-control" id="fungi_habitat">
                                    </div>
                                </form>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">{{ _('Cancelar') }}</button>
                                <button type="button" class="btn btn-primary" id="saveFungus">{{ _('Guardar') }}</button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Modal para Editar Usuario -->
                <div class="modal fade" id="userModal" tabindex="-1" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="userModalTitle">{{ _('Editar Usuario') }}</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <form id="userForm">
                                    <input type="hidden" id="user_id">
                                    <div class="mb-3">
                                        <label for="username" class="form-label">{{ _('Nombre de usuario') }}</label>
                                        <input type="text" class="form-control" id="username" required>
                                    </div>
                                    <div class="mb-3">
                                        <label for="email" class="form-label">{{ _('Email') }}</label>
                                        <input type="email" class="form-control" id="email" required>
                                    </div>
                                    <div class="mb-3">
                                        <label for="role" class="form-label">{{ _('Rol') }}</label>
                                        <select class="form-control" id="role">
                                            <option value="user">{{ _('Usuario') }}</option>
                                            <option value="admin">{{ _('Administrador') }}</option>
                                        </select>
                                    </div>
                                </form>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">{{ _('Cancelar') }}</button>
                                <button type="button" class="btn btn-primary" id="saveUser">{{ _('Guardar') }}</button>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Bootstrap JS y dependencias -->
    <script src="/assets/lib/twbs/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Inicializar tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            });
            
            // Funciones para gestión de hongos
            const btnAddFungi = document.getElementById('btnAddFungi');
            const fungusModal = new bootstrap.Modal(document.getElementById('fungusModal'));
            const userModal = new bootstrap.Modal(document.getElementById('userModal'));
            
            // Agregar listeners para las pestañas
            const userTab = document.getElementById('users-tab');
            if (userTab) {
                userTab.addEventListener('click', function() {
                    // Cargamos los usuarios al hacer clic en la pestaña
                    console.log('Cargando usuarios...');
                    loadUsersFromAPI();
                });
            }
            
            // También cargar usuarios cuando se muestra la pestaña
            document.querySelectorAll('button[data-bs-toggle="tab"]').forEach(function(tab) {
                tab.addEventListener('shown.bs.tab', function(event) {
                    if (event.target.getAttribute('id') === 'users-tab') {
                        console.log('Pestaña de usuarios mostrada, cargando datos...');
                        loadUsersFromAPI();
                    }
                });
            });
            
            // Si la pestaña de usuarios está activa al cargar, cargar datos inmediatamente
            if (document.querySelector('#users.active')) {
                console.log('Pestaña de usuarios activa al cargar, cargando datos...');
                loadUsersFromAPI();
            }
            
            // Función para cargar usuarios desde el endpoint API
            function loadUsersFromAPI() {
                console.log('Ejecutando loadUsersFromAPI()');
                // Obtener el contenedor donde mostraremos los usuarios
                const tableBody = document.querySelector('#users-table tbody');
                
                if (!tableBody) {
                    console.error('No se encontró la tabla de usuarios');
                    return;
                }
                
                // Mostrar indicador de carga
                tableBody.innerHTML = `<tr><td colspan="5" class="text-center"><i class="fas fa-spinner fa-spin"></i> {{ _('Cargando usuarios...') }}</td></tr>`;
                
                // Realizar solicitud a la API
                fetch('/api/users')
                    .then(response => {
                        console.log('Respuesta API:', response);
                        if (!response.ok) {
                            if (response.status === 401 || response.status === 403) {
                                throw new Error('{{ _('No tienes permisos para ver esta información') }}');
                            }
                            throw new Error(`{{ _('Error al cargar usuarios') }} (${response.status})`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Datos recibidos:', data);
                        if (data.success && Array.isArray(data.data)) {
                            // Limpiar tabla
                            tableBody.innerHTML = '';
                            
                            // Añadir cada usuario
                            if (data.data.length === 0) {
                                tableBody.innerHTML = `<tr><td colspan="5" class="text-center">{{ _('No hay usuarios registrados') }}</td></tr>`;
                            } else {
                                data.data.forEach(user => {
                                    tableBody.innerHTML += `
                                        <tr>
                                            <td>${user.id}</td>
                                            <td>${user.username}</td>
                                            <td>${user.email}</td>
                                            <td>${user.role}</td>
                                            <td>
                                                <button class="btn btn-sm btn-info edit-user" data-id="${user.id}">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-sm btn-danger delete-user" data-id="${user.id}">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    `;
                                });
                                
                                // Volver a agregar event listeners a los botones
                                addUserEventListeners();
                            }
                        } else {
                            tableBody.innerHTML = `<tr><td colspan="5" class="text-center text-danger">{{ _('Error al cargar usuarios') }}</td></tr>`;
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        tableBody.innerHTML = `<tr><td colspan="5" class="text-center text-danger">${error.message}</td></tr>`;
                    });
            }

            // Función para añadir event listeners a los botones de usuarios
            function addUserEventListeners() {
                // Eventos para usuarios
                document.querySelectorAll('.edit-user').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const id = this.dataset.id;
                        document.getElementById('userModalTitle').textContent = '{{ _('Editar Usuario') }}';
                        
                        // Obtener datos del usuario de la fila actual
                        const row = this.closest('tr');
                        document.getElementById('user_id').value = row.cells[0].textContent;
                        document.getElementById('username').value = row.cells[1].textContent;
                        document.getElementById('email').value = row.cells[2].textContent;
                        document.getElementById('role').value = row.cells[3].textContent.toLowerCase();
                        userModal.show();
                    });
                });
                
                // Eliminar usuario
                document.querySelectorAll('.delete-user').forEach(btn => {
                    btn.addEventListener('click', function() {
                        if (confirm('{{ _('¿Estás seguro de que deseas eliminar este usuario?') }}')) {
                            const id = this.dataset.id;
                            
                            fetch(`/api/users/${id}`, {
                                method: 'DELETE',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    alert('{{ _('Usuario eliminado correctamente') }}');
                                    loadUsersFromAPI(); // Recargar lista de usuarios
                                } else {
                                    alert(data.error || '{{ _('Error al eliminar el usuario') }}');
                                }
                            });
                        }
                    });
                });
            }
            
            // Evento para abrir modal de nuevo hongo
            btnAddFungi.addEventListener('click', function() {
                document.getElementById('fungusModalTitle').textContent = '{{ _('Nuevo Hongo') }}';
                document.getElementById('fungusForm').reset();
                document.getElementById('fungi_id').value = '';
                fungusModal.show();
            });
            
            // Evento para botones de editar hongo
            document.querySelectorAll('.edit-fungi').forEach(btn => {
                btn.addEventListener('click', function() {
                    const id = this.dataset.id;
                    document.getElementById('fungusModalTitle').textContent = '{{ _('Editar Hongo') }}';
                    
                    // Obtener datos del hongo mediante API
                    fetch(`/api/fungi/${id}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                const fungi = data.data;
                                document.getElementById('fungi_id').value = fungi.id;
                                document.getElementById('fungi_name').value = fungi.name;
                                document.getElementById('fungi_common_name').value = fungi.common_name || '';
                                document.getElementById('fungi_edibility').value = fungi.edibility || 'sin-valor';
                                document.getElementById('fungi_habitat').value = fungi.habitat || '';
                                fungusModal.show();
                            } else {
                                alert('{{ _('Error al cargar datos del hongo') }}');
                            }
                        });
                });
            });
            
            // Evento para botones de borrar hongo
            document.querySelectorAll('.delete-fungi').forEach(btn => {
                btn.addEventListener('click', function() {
                    if (confirm('{{ _('¿Estás seguro de que deseas eliminar este hongo?') }}')) {
                        const id = this.dataset.id;
                        
                        // Eliminar hongo mediante API
                        fetch(`/api/fungi/${id}`, {
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                alert('{{ _('Hongo eliminado correctamente') }}');
                                location.reload();
                            } else {
                                alert(data.error || '{{ _('Error al eliminar el hongo') }}');
                            }
                        });
                    }
                });
            });
            
            // Guardar hongo (crear/editar)
            document.getElementById('saveFungus').addEventListener('click', function() {
                const fungiId = document.getElementById('fungi_id').value;
                const formData = {
                    name: document.getElementById('fungi_name').value,
                    common_name: document.getElementById('fungi_common_name').value,
                    edibility: document.getElementById('fungi_edibility').value,
                    habitat: document.getElementById('fungi_habitat').value
                };
                
                const method = fungiId ? 'PUT' : 'POST';
                const url = fungiId ? `/api/fungi/${fungiId}` : '/api/fungi';
                
                fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(fungiId ? '{{ _('Hongo actualizado correctamente') }}' : '{{ _('Hongo creado correctamente') }}');
                        fungusModal.hide();
                        location.reload();
                    } else {
                        alert(data.error || '{{ _('Error al guardar el hongo') }}');
                    }
                });
            });
            
            // Guardar usuario
            document.getElementById('saveUser').addEventListener('click', function() {
                const userId = document.getElementById('user_id').value;
                const formData = {
                    username: document.getElementById('username').value,
                    email: document.getElementById('email').value,
                    role: document.getElementById('role').value
                };
                
                fetch(`/api/users/${userId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('{{ _('Usuario actualizado correctamente') }}');
                        userModal.hide();
                        loadUsersFromAPI(); // Recargar lista en lugar de recargar la página
                    } else {
                        alert(data.error || '{{ _('Error al actualizar el usuario') }}');
                    }
                });
            });

            // Función para cargar hongos desde el endpoint API con paginación
            function loadFungiFromAPI(page = 1, limit = 20) {
                console.log('Ejecutando loadFungiFromAPI(), página:', page, 'límite:', limit);
                // Obtener el contenedor donde mostraremos los hongos
                const tableBody = document.querySelector('#fungiTable tbody');
                const paginationContainer = document.getElementById('fungiPagination');
                
                if (!tableBody) {
                    console.error('No se encontró la tabla de hongos');
                    return;
                }
                
                // Mostrar indicador de carga
                tableBody.innerHTML = `<tr><td colspan="4" class="text-center"><i class="fas fa-spinner fa-spin"></i> {{ _('Cargando hongos...') }}</td></tr>`;
                
                // Realizar solicitud a la API con paginación usando el endpoint existente
                fetch(`/api/fungi/page/${page}/limit/${limit}`)
                    .then(response => {
                        console.log('Respuesta API hongos:', response);
                        if (!response.ok) {
                            if (response.status === 401 || response.status === 403) {
                                throw new Error('{{ _('No tienes permisos para ver esta información') }}');
                            }
                            throw new Error(`{{ _('Error al cargar hongos') }} (${response.status})`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Datos de hongos recibidos:', data);
                        if (data.success && Array.isArray(data.data)) {
                            // Limpiar tabla
                            tableBody.innerHTML = '';
                            
                            // Añadir cada hongo
                            if (data.data.length === 0) {
                                tableBody.innerHTML = `<tr><td colspan="4" class="text-center">{{ _('No hay hongos registrados') }}</td></tr>`;
                            } else {
                                data.data.forEach(fungi => {
                                    tableBody.innerHTML += `
                                        <tr>
                                            <td>${fungi.id}</td>
                                            <td>${fungi.name}</td>
                                            <td>${fungi.edibility || '-'}</td>
                                            <td>
                                                <button class="btn btn-sm btn-info edit-fungi" data-id="${fungi.id}">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-sm btn-danger delete-fungi" data-id="${fungi.id}">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    `;
                                });
                                
                                // Crear los controles de paginación
                                if (paginationContainer && data.pagination) {
                                    renderPagination(paginationContainer, data.pagination, limit);
                                }
                            }
                            
                            // Agregar eventos a los botones de editar
                            document.querySelectorAll('.edit-fungi').forEach(btn => {
                                btn.addEventListener('click', function() {
                                    const id = this.dataset.id;
                                    
                                    // Cargar datos del hongo para editar
                                    fetch(`/api/fungi/${id}`)
                                        .then(response => response.json())
                                        .then(data => {
                                            if (data.success) {
                                                const fungi = data.data;
                                                
                                                // Rellenar el formulario con los datos del hongo
                                                document.getElementById('fungi_id').value = fungi.id;
                                                document.getElementById('fungi_name').value = fungi.name;
                                                document.getElementById('fungi_common_name').value = fungi.common_name || '';
                                                document.getElementById('fungi_edibility').value = fungi.edibility || 'sin-valor';
                                                document.getElementById('fungi_habitat').value = fungi.habitat || '';
                                                fungusModal.show();
                                            } else {
                                                alert('{{ _('Error al cargar datos del hongo') }}');
                                            }
                                        });
                                });
                            });
                            
                            // Evento para botones de borrar hongo
                            document.querySelectorAll('.delete-fungi').forEach(btn => {
                                btn.addEventListener('click', function() {
                                    if (confirm('{{ _('¿Estás seguro de que deseas eliminar este hongo?') }}')) {
                                        const id = this.dataset.id;
                                        
                                        // Eliminar hongo mediante API
                                        fetch(`/api/fungi/${id}`, {
                                            method: 'DELETE',
                                            headers: {
                                                'Content-Type': 'application/json'
                                            }
                                        })
                                        .then(response => response.json())
                                        .then(data => {
                                            if (data.success) {
                                                alert('{{ _('Hongo eliminado correctamente') }}');
                                                // Recargar la página actual de hongos
                                                const currentPage = parseInt(paginationContainer.querySelector('.active .page-link').dataset.page || 1);
                                                loadFungiFromAPI(currentPage, limit);
                                            } else {
                                                alert(data.error || '{{ _('Error al eliminar el hongo') }}');
                                            }
                                        });
                                    }
                                });
                            });
                        } else {
                            tableBody.innerHTML = `<tr><td colspan="4" class="text-center">{{ _('Error al cargar hongos') }}</td></tr>`;
                            console.error('Error en datos:', data);
                        }
                    })
                    .catch(error => {
                        tableBody.innerHTML = `<tr><td colspan="4" class="text-center">{{ _('Error') }}: ${error.message}</td></tr>`;
                        console.error('Error cargando hongos:', error);
                    });
            }

            // Función para renderizar los controles de paginación
            function renderPagination(container, pagination, limit) {
                const currentPage = pagination.current_page;
                const totalPages = pagination.total_pages;
                
                // No mostrar paginación si solo hay una página
                if (totalPages <= 1) {
                    container.innerHTML = '';
                    return;
                }
                
                let html = `<nav aria-label="Paginación de hongos">
                    <ul class="pagination justify-content-center">`;
                
                // Botón "Anterior"
                html += `<li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="#" data-page="${currentPage - 1}" aria-label="Anterior">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>`;
                
                // Determinar el rango de páginas a mostrar
                const maxVisiblePages = 5;
                let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
                let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
                
                // Ajustar el rango si estamos cerca del final
                if (endPage === totalPages) {
                    startPage = Math.max(1, endPage - maxVisiblePages + 1);
                }
                
                // Primera página si no está incluida en el rango
                if (startPage > 1) {
                    html += `<li class="page-item">
                        <a class="page-link" href="#" data-page="1">1</a>
                    </li>`;
                    
                    if (startPage > 2) {
                        html += `<li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>`;
                    }
                }
                
                // Páginas del rango
                for (let i = startPage; i <= endPage; i++) {
                    html += `<li class="page-item ${i === currentPage ? 'active' : ''}">
                        <a class="page-link" href="#" data-page="${i}">${i}</a>
                    </li>`;
                }
                
                // Última página si no está incluida en el rango
                if (endPage < totalPages) {
                    if (endPage < totalPages - 1) {
                        html += `<li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>`;
                    }
                    
                    html += `<li class="page-item">
                        <a class="page-link" href="#" data-page="${totalPages}">${totalPages}</a>
                    </li>`;
                }
                
                // Botón "Siguiente"
                html += `<li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="#" data-page="${currentPage + 1}" aria-label="Siguiente">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>`;
                
                html += `</ul></nav>
                <div class="text-center text-muted">
                    <small>{{ _('Mostrando') }} ${pagination.records_per_page} {{ _('de') }} ${pagination.total_records} {{ _('hongos') }}</small>
                </div>`;
                
                container.innerHTML = html;
                
                // Agregar eventos a los enlaces de paginación
                container.querySelectorAll('.page-link').forEach(link => {
                    link.addEventListener('click', function(e) {
                        e.preventDefault();
                        const page = parseInt(this.dataset.page);
                        if (!isNaN(page) && page > 0) {
                            loadFungiFromAPI(page, limit);
                        }
                    });
                });
            }

            // Agregar selector de elementos por página
            function setupLimitSelector(selector, defaultLimit = 20) {
                const limitSelector = document.querySelector(selector);
                if (limitSelector) {
                    limitSelector.value = defaultLimit;
                    limitSelector.addEventListener('change', function() {
                        const limit = parseInt(this.value);
                        loadFungiFromAPI(1, limit);
                    });
                }
            }

            // Agregar listeners para las pestañas
            const fungiTab = document.getElementById('fungi-tab');
            if (fungiTab) {
                fungiTab.addEventListener('click', function() {
                    // Cargamos los hongos al hacer clic en la pestaña
                    console.log('Cargando hongos...');
                    const limitSelector = document.getElementById('fungiItemsPerPage');
                    const limit = limitSelector ? parseInt(limitSelector.value) : 20;
                    loadFungiFromAPI(1, limit);
                });
            }
            
            // También cargar hongos cuando se muestra la pestaña
            document.querySelectorAll('button[data-bs-toggle="tab"]').forEach(function(tab) {
                tab.addEventListener('shown.bs.tab', function(event) {
                    if (event.target.getAttribute('id') === 'fungi-tab') {
                        console.log('Pestaña de hongos mostrada, cargando datos...');
                        const limitSelector = document.getElementById('fungiItemsPerPage');
                        const limit = limitSelector ? parseInt(limitSelector.value) : 20;
                        loadFungiFromAPI(1, limit);
                    }
                });
            });
            
            // Configurar el selector de elementos por página
            setupLimitSelector('#fungiItemsPerPage', 20);
            
            // Si la pestaña de hongos está activa al cargar, cargar datos inmediatamente
            if (document.querySelector('#fungi.active')) {
                console.log('Pestaña de hongos activa al cargar, cargando datos...');
                const limitSelector = document.getElementById('fungiItemsPerPage');
                const limit = limitSelector ? parseInt(limitSelector.value) : 20;
                loadFungiFromAPI(1, limit);
            }
        });
    </script>
</body>
</html>