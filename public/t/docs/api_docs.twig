{% extends "base.twig" %}

{% block head %}
{{ parent() }}
<style>
  .endpoint {
    margin-bottom: 2rem;
    border: 1px solid #ddd;
    border-radius: 5px;
    overflow: hidden;
  }
  .endpoint-header {
    padding: 1rem;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  .endpoint-body {
    padding: 1rem;
    border-top: 1px solid #ddd;
    display: none;
  }
  .method {
    font-weight: bold;
    padding: 0.25rem 0.5rem;
    border-radius: 3px;
    color: white;
    margin-right: 1rem;
  }
  .method-get { background-color: #61affe; }
  .method-post { background-color: #49cc90; }
  .method-put { background-color: #fca130; }
  .method-delete { background-color: #f93e3e; }
  .response-container {
    background-color: #272822;
    color: #f8f8f2;
    padding: 1rem;
    border-radius: 5px;
    overflow: auto;
    margin-top: 1rem;
    display: none;
  }
  .url-path {
    font-family: monospace;
    font-size: 1.1rem;
  }
  .param-form {
    margin-top: 1rem;
  }
  .try-btn {
    margin-top: 1rem;
  }
  .loading {
    display: inline-block;
    margin-left: 1rem;
    display: none;
  }
</style>
{% endblock %}

{% block content %}
<div class="container my-5">
  <h1 class="mb-4">Documentación de la API</h1>
  
  <p class="lead">Esta documentación te permite probar los endpoints directamente. Haz clic en cualquier endpoint para expandir sus detalles y probar su funcionamiento.</p>
  
  <h2 class="mt-5">Fungi</h2>
  
  <div class="endpoint">
    <div class="endpoint-header" data-bs-toggle="collapse" data-bs-target="#fungi-all">
      <div>
        <span class="method method-get">GET</span>
        <span class="url-path">/api/fungi</span>
      </div>
      <div>Obtener todos los hongos</div>
    </div>
    <div class="endpoint-body" id="fungi-all">
      <p>Retorna una lista de todos los hongos en la base de datos.</p>
      <button class="btn btn-primary try-btn" data-url="/api/fungi" data-method="GET">Probar</button>
      <span class="loading">Cargando...</span>
      <div class="response-container"></div>
    </div>
  </div>
  
  <div class="endpoint">
    <div class="endpoint-header" data-bs-toggle="collapse" data-bs-target="#fungi-paginated">
      <div>
        <span class="method method-get">GET</span>
        <span class="url-path">/api/fungi/page/{page}/limit/{limit}</span>
      </div>
      <div>Obtener hongos paginados</div>
    </div>
    <div class="endpoint-body" id="fungi-paginated">
      <p>Retorna una lista paginada de hongos.</p>
      
      <form class="param-form row g-3">
        <div class="col-md-6">
          <label for="page" class="form-label">Página</label>
          <input type="number" class="form-control" id="page" name="page" value="1" min="1">
        </div>
        <div class="col-md-6">
          <label for="limit" class="form-label">Límite</label>
          <input type="number" class="form-control" id="limit" name="limit" value="10" min="1">
        </div>
      </form>
      
      <button class="btn btn-primary try-btn" data-url="/api/fungi/page/{page}/limit/{limit}" data-method="GET">Probar</button>
      <span class="loading">Cargando...</span>
      <div class="response-container"></div>
    </div>
  </div>
  
  <div class="endpoint">
    <div class="endpoint-header" data-bs-toggle="collapse" data-bs-target="#fungi-id">
      <div>
        <span class="method method-get">GET</span>
        <span class="url-path">/api/fungi/{id}</span>
      </div>
      <div>Obtener un hongo específico</div>
    </div>
    <div class="endpoint-body" id="fungi-id">
      <p>Retorna información detallada sobre un hongo específico.</p>
      
      <form class="param-form">
        <div class="mb-3">
          <label for="fungi-id-input" class="form-label">ID del hongo</label>
          <input type="number" class="form-control" id="fungi-id-input" name="id" value="1" min="1">
        </div>
      </form>
      
      <button class="btn btn-primary try-btn" data-url="/api/fungi/{id}" data-method="GET">Probar</button>
      <span class="loading">Cargando...</span>
      <div class="response-container"></div>
    </div>
  </div>
  
  <div class="endpoint">
    <div class="endpoint-header" data-bs-toggle="collapse" data-bs-target="#fungi-random">
      <div>
        <span class="method method-get">GET</span>
        <span class="url-path">/api/fungi/random</span>
      </div>
      <div>Obtener un hongo aleatorio</div>
    </div>
    <div class="endpoint-body" id="fungi-random">
      <p>Retorna un hongo seleccionado aleatoriamente de la base de datos.</p>
      <button class="btn btn-primary try-btn" data-url="/api/fungi/random" data-method="GET">Probar</button>
      <span class="loading">Cargando...</span>
      <div class="response-container"></div>
    </div>
  </div>

  <div class="endpoint">
    <div class="endpoint-header" data-bs-toggle="collapse" data-bs-target="#fungi-create">
      <div>
        <span class="method method-post">POST</span>
        <span class="url-path">/api/fungi</span>
      </div>
      <div>Crear un nuevo hongo</div>
    </div>
    <div class="endpoint-body" id="fungi-create">
      <p>Crea un nuevo registro de hongo en la base de datos.</p>
      
      <form class="param-form">
        <div class="mb-3">
          <label for="create-name" class="form-label">Nombre</label>
          <input type="text" class="form-control" id="create-name" name="name" required>
        </div>
        <div class="mb-3">
          <label for="create-edibility" class="form-label">Comestibilidad</label>
          <select class="form-control" id="create-edibility" name="edibility" required>
            <option value="edible">Comestible</option>
            <option value="toxic">Tóxico</option>
            <option value="medicinal">Medicinal</option>
            <option value="unknown">Desconocido</option>
          </select>
        </div>
        <div class="mb-3">
          <label for="create-habitat" class="form-label">Hábitat</label>
          <input type="text" class="form-control" id="create-habitat" name="habitat" required>
        </div>
        <div class="mb-3">
          <label for="create-observations" class="form-label">Observaciones</label>
          <textarea class="form-control" id="create-observations" name="observations"></textarea>
        </div>
        <div class="mb-3">
          <label for="create-common-name" class="form-label">Nombre común</label>
          <input type="text" class="form-control" id="create-common-name" name="common_name">
        </div>
        <div class="mb-3">
          <label for="create-synonym" class="form-label">Sinónimo</label>
          <input type="text" class="form-control" id="create-synonym" name="synonym">
        </div>
        <div class="mb-3">
          <label for="create-title" class="form-label">Título</label>
          <input type="text" class="form-control" id="create-title" name="title">
        </div>
      </form>
      
      <button class="btn btn-primary try-btn" data-url="/api/fungi" data-method="POST">Probar</button>
      <span class="loading">Cargando...</span>
      <div class="response-container"></div>
    </div>
  </div>
  
  <h2 class="mt-5">Usuarios</h2>
  
  <div class="endpoint">
    <div class="endpoint-header" data-bs-toggle="collapse" data-bs-target="#users-all">
      <div>
        <span class="method method-get">GET</span>
        <span class="url-path">/api/users</span>
      </div>
      <div>Obtener todos los usuarios</div>
    </div>
    <div class="endpoint-body" id="users-all">
      <p>Retorna una lista de todos los usuarios (sin mostrar contraseñas).</p>
      <button class="btn btn-primary try-btn" data-url="/api/users" data-method="GET">Probar</button>
      <span class="loading">Cargando...</span>
      <div class="response-container"></div>
    </div>
  </div>
  
  <div class="endpoint">
    <div class="endpoint-header" data-bs-toggle="collapse" data-bs-target="#users-create">
      <div>
        <span class="method method-post">POST</span>
        <span class="url-path">/api/users</span>
      </div>
      <div>Crear un nuevo usuario</div>
    </div>
    <div class="endpoint-body" id="users-create">
      <p>Crea un nuevo usuario en la base de datos.</p>
      
      <form class="param-form">
        <div class="mb-3">
          <label for="user-username" class="form-label">Nombre de usuario</label>
          <input type="text" class="form-control" id="user-username" name="username" required>
        </div>
        <div class="mb-3">
          <label for="user-email" class="form-label">Email</label>
          <input type="email" class="form-control" id="user-email" name="email" required>
        </div>
        <div class="mb-3">
          <label for="user-password" class="form-label">Contraseña</label>
          <input type="password" class="form-control" id="user-password" name="password" required>
        </div>
      </form>
      
      <button class="btn btn-primary try-btn" data-url="/api/users" data-method="POST">Probar</button>
      <span class="loading">Cargando...</span>
      <div class="response-container"></div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Expandir/colapsar los endpoints
  document.querySelectorAll('.endpoint-header').forEach(header => {
    header.addEventListener('click', function() {
      const body = this.nextElementSibling;
      body.style.display = body.style.display === 'block' ? 'none' : 'block';
    });
  });
  
  // Manejar los clics en los botones "Probar"
  document.querySelectorAll('.try-btn').forEach(button => {
    button.addEventListener('click', function() {
      const container = this.closest('.endpoint-body');
      const responseContainer = container.querySelector('.response-container');
      const loadingSpinner = container.querySelector('.loading');
      const url = processUrl(this.getAttribute('data-url'), container);
      const method = this.getAttribute('data-method');
      
      // Mostrar el spinner de carga
      loadingSpinner.style.display = 'inline-block';
      
      // Preparar los datos para métodos POST/PUT
      let requestOptions = {
        method: method,
        headers: {
          'Accept': 'application/json'
        }
      };
      
      if (method === 'POST' || method === 'PUT') {
        const form = container.querySelector('.param-form');
        const formData = new FormData(form);
        const jsonData = {};
        
        formData.forEach((value, key) => {
          jsonData[key] = value;
        });
        
        requestOptions.headers['Content-Type'] = 'application/json';
        requestOptions.body = JSON.stringify(jsonData);
      }
      
      // Realizar la petición
      fetch(url, requestOptions)
        .then(response => response.json())
        .then(data => {
          responseContainer.style.display = 'block';
          responseContainer.innerHTML = '<pre>' + JSON.stringify(data, null, 2) + '</pre>';
          loadingSpinner.style.display = 'none';
        })
        .catch(error => {
          responseContainer.style.display = 'block';
          responseContainer.innerHTML = '<pre>Error: ' + error.message + '</pre>';
          loadingSpinner.style.display = 'none';
        });
    });
  });
  
  // Procesar la URL con los parámetros del formulario
  function processUrl(url, container) {
    const form = container.querySelector('.param-form');
    if (!form) return url;
    
    const formData = new FormData(form);
    let processedUrl = url;
    
    formData.forEach((value, key) => {
      // Reemplazar placeholders en la URL
      const placeholder = '{' + key + '}';
      if (processedUrl.includes(placeholder)) {
        processedUrl = processedUrl.replace(placeholder, value);
      }
    });
    
    return processedUrl;
  }
});
</script>
{% endblock %}
